
schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  MERCHANTS @join__graph(name: "merchants", url: "http://localhost:4001/")
  TRANSACTIONS @join__graph(name: "transactions", url: "http://localhost:4002/")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Merchant
  @join__type(graph: MERCHANTS, key: "id")
{
  id: ID!
  email: String!
  name: String!
  capabilities: [MerchantCapability!]!
  transactions: [Transaction!]
}

enum MerchantCapability
  @join__type(graph: MERCHANTS)
{
  ALLTAP
  PLURAL
  PLUTUS
}

type Query
  @join__type(graph: MERCHANTS)
  @join__type(graph: TRANSACTIONS)
{
  merchant(id: ID!): Merchant @join__field(graph: MERCHANTS)
  merchants: [Merchant!] @join__field(graph: MERCHANTS)
  transaction(id: ID!): Transaction @join__field(graph: TRANSACTIONS)
  transactions: [Transaction] @join__field(graph: TRANSACTIONS)
}

type Transaction
  @join__type(graph: MERCHANTS, key: "id")
  @join__type(graph: TRANSACTIONS, key: "id")
{
  id: ID!
  amount: Float! @join__field(graph: TRANSACTIONS)
  type: TransactionType! @join__field(graph: TRANSACTIONS)
  date: String! @join__field(graph: TRANSACTIONS)
}

enum TransactionType
  @join__type(graph: TRANSACTIONS)
{
  PLUTUS
  ALLTAP
  PLURAL
}